[
    {
        "id": "269813c2b8029cb5",
        "type": "tab",
        "label": "Prosys Server",
        "disabled": false,
        "info": ""
    },
    {
        "id": "13b08bfeb632c52a",
        "type": "tab",
        "label": "Node-Red OPCUA Server",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6d737813fc1388fc",
        "type": "tab",
        "label": "Prosys A&E",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7a64650c.9b1d54",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b15ae0fd.c3766",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.80:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "login": true
    },
    {
        "id": "9de0b797.2888f",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#094777",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#094777",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#094777",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0e71be",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#094777",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Dashboard Node-Red: OPC UA",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6c9747ae.558e58",
        "type": "ui_tab",
        "name": "Simulacion Servidor OPC UA Prosys",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "65521fcd.5d99a",
        "type": "ui_tab",
        "name": "Prueba",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "535b72c3.b2d50c",
        "type": "ui_group",
        "name": "Lecturas de Simulaci√≥n de Servidor",
        "tab": "6c9747ae.558e58",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e3715be7.8ca9b8",
        "type": "ui_group",
        "name": "Servidor OPC UA",
        "tab": "65521fcd.5d99a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a6463b49.678438",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:55380",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "5e74200e.55d4e",
        "type": "ui_group",
        "name": "Control Arduino",
        "tab": "6e9b9ef9.94e89",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "6e9b9ef9.94e89",
        "type": "ui_tab",
        "name": "Servidor OPC UA Node-Red",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7e10f4e5.f87c2c",
        "type": "modbus-client",
        "name": "Delta PLC",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.0.154",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "f9e73317c999a441",
        "type": "arduino-board",
        "device": "/dev/ttyACM0"
    },
    {
        "id": "b439aa6697087538",
        "type": "ui_group",
        "name": "Display Arduino",
        "tab": "6e9b9ef9.94e89",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "c8ca0c4a21dcf973",
        "type": "ui_group",
        "name": "Control Node-Red",
        "tab": "6e9b9ef9.94e89",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fa560be65b703c6e",
        "type": "ui_group",
        "name": "Display Node-Red",
        "tab": "6e9b9ef9.94e89",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9884fc027ca07aef",
        "type": "ui_group",
        "name": "Escrituras de cliente",
        "tab": "6c9747ae.558e58",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "66dabf03.46121",
        "type": "OpcUa-Endpoint",
        "z": "6d737813fc1388fc",
        "endpoint": "opc.tcp://localhost:53530/OPCUA/SimulationServer",
        "login": false
    },
    {
        "id": "fea920a6eb1a2379",
        "type": "ui_chart",
        "z": "269813c2b8029cb5",
        "name": "",
        "group": "535b72c3.b2d50c",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Dientes de Sierra",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 610,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2b045d6987899c07",
        "type": "ui_chart",
        "z": "269813c2b8029cb5",
        "name": "",
        "group": "535b72c3.b2d50c",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "Senoidal",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 580,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "41d21cb0478972e6",
        "type": "function",
        "z": "269813c2b8029cb5",
        "name": "Interpreta datos",
        "func": "msg1 = {};\nmsg2 = {};\nmsg3 = {};\nmsg4 = {};\nmsg5 = {};\nmsg6 = {};\nmsg7 = {};\nmsg8 = {};\n\nmsg1.topic=\"ns=3;i=1001;datatype=Double\";\nmsg2.topic=\"ns=3;i=1002;datatype=Double\";\nmsg3.topic=\"ns=3;i=1003;datatype=Double\";\nmsg4.topic=\"ns=3;i=1004;datatype=Double\";\nmsg5.topic=\"ns=3;i=1005;datatype=Double\";\nmsg6.topic=\"ns=3;i=1006;datatype=Double\";\nmsg7.topic=\"ns=3;i=1013;datatype=Double\";\nmsg8.topic=\"ns=3;i=1008;datatype=Boolean\";\n\nreturn [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8];",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ],
            [
                "13dfd6c11ca84460"
            ]
        ]
    },
    {
        "id": "6826e883895b0856",
        "type": "inject",
        "z": "269813c2b8029cb5",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "41d21cb0478972e6"
            ]
        ]
    },
    {
        "id": "0c4f4a1c17ca0376",
        "type": "function",
        "z": "269813c2b8029cb5",
        "name": "Separa",
        "func": "msg1 = {};\nmsg2 = {};\nmsg3 = {};\nmsg4 = {};\nmsg5 = {};\nmsg6 = {};\nmsg7 = {};\nmsg8 = {};\n\n\nif(msg.topic==\"ns=3;i=1001\")\n{\n    msg1.payload=msg.payload;\n    msg1.topic=\"Contador;\"\n    //return [msg1, null, null, null, null, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1002\")\n{\n    msg2.payload=msg.payload;\n    msg2.topic=\"Random;\"\n    //return [null, msg2, null, null, null, null, null, null];\n\n}\n\nif(msg.topic==\"ns=3;i=1003\")\n{\n    msg3.payload=msg.payload;\n    msg3.topic=\"Dientes de Sierra;\"\n    //return [null, null, msg3, null, null, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1004\")\n{\n    msg4.payload=msg.payload;\n    msg4.topic=\"Senoidal;\"\n    //return [null, null, null, msg4, null, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1005\")\n{\n    msg5.payload=msg.payload;\n    msg5.topic=\"Cuadrada;\"\n    //return [null, null, null, null, msg5, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1006\")\n{\n    msg6.payload=msg.payload;\n    msg6.topic=\"Triangular;\"\n    //return [null, null, null, null, null, msg6, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1013\")\n{\n    msg7.payload=msg.payload;\n    msg7.topic=\"Variable;\"\n    //return [null, null, null, null, null, null, msg7, null];\n}\n\nif(msg.topic==\"ns=3;i=1008\")\n{\n    msg8.payload=msg.payload;\n    msg8.topic=\"Pushbutton;\"\n    //return [null, null, null, null, null, null, null, msg8];\n}\n\nreturn [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8];",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "b9c679c4c21f8ba4"
            ],
            [
                "7e8cb2f3162518b7"
            ],
            [
                "fea920a6eb1a2379"
            ],
            [
                "2b045d6987899c07"
            ],
            [
                "0f0cb8d229c343cc"
            ],
            [
                "607b76ce44d9cd2f"
            ],
            [
                "ec97b8e08a9c0ad7"
            ],
            [
                "82a75bd4b9ebee39",
                "742c101c0cec44c7"
            ]
        ]
    },
    {
        "id": "b9c679c4c21f8ba4",
        "type": "ui_chart",
        "z": "269813c2b8029cb5",
        "name": "",
        "group": "535b72c3.b2d50c",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Contador",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 580,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7e8cb2f3162518b7",
        "type": "ui_chart",
        "z": "269813c2b8029cb5",
        "name": "",
        "group": "535b72c3.b2d50c",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Random",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 580,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0f0cb8d229c343cc",
        "type": "ui_chart",
        "z": "269813c2b8029cb5",
        "name": "",
        "group": "535b72c3.b2d50c",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Cuadrada",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 580,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "607b76ce44d9cd2f",
        "type": "ui_chart",
        "z": "269813c2b8029cb5",
        "name": "",
        "group": "535b72c3.b2d50c",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Triangular",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 580,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ec97b8e08a9c0ad7",
        "type": "ui_text",
        "z": "269813c2b8029cb5",
        "group": "9884fc027ca07aef",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Escritura del cliente",
        "label": "Variable",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "82a75bd4b9ebee39",
        "type": "ui_text",
        "z": "269813c2b8029cb5",
        "group": "9884fc027ca07aef",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Interruptor",
        "label": "Estado",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 590,
        "y": 380,
        "wires": []
    },
    {
        "id": "9ed5a27fc456b0a3",
        "type": "ui_switch",
        "z": "269813c2b8029cb5",
        "name": "Interruptor",
        "label": "Switch",
        "tooltip": "",
        "group": "9884fc027ca07aef",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "ns=3;i=1008;datatype=Boolean",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 150,
        "y": 500,
        "wires": [
            [
                "e54c7e7c79e79ab1"
            ]
        ]
    },
    {
        "id": "b970a0d9691e52cb",
        "type": "ui_numeric",
        "z": "269813c2b8029cb5",
        "name": "Variables",
        "label": "Escritura del cliente",
        "tooltip": "",
        "group": "9884fc027ca07aef",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "ns=3;i=1013;datatype=Double",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "step": 1,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "e54c7e7c79e79ab1"
            ]
        ]
    },
    {
        "id": "13dfd6c11ca84460",
        "type": "OpcUa-Client",
        "z": "269813c2b8029cb5",
        "endpoint": "b15ae0fd.c3766",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "l",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "Lectura de cliente",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "0c4f4a1c17ca0376"
            ]
        ]
    },
    {
        "id": "e54c7e7c79e79ab1",
        "type": "OpcUa-Client",
        "z": "269813c2b8029cb5",
        "endpoint": "b15ae0fd.c3766",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "l",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "Escritura de cliente",
        "x": 370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "742c101c0cec44c7",
        "type": "ui_led",
        "z": "269813c2b8029cb5",
        "order": 4,
        "group": "9884fc027ca07aef",
        "width": 0,
        "height": 0,
        "label": "Led",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Led",
        "x": 570,
        "y": 420,
        "wires": []
    },
    {
        "id": "084da49ee60a772a",
        "type": "rpi-gpio in",
        "z": "269813c2b8029cb5",
        "name": "Pushbutton",
        "pin": "17",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 150,
        "y": 560,
        "wires": [
            [
                "2b29fd281e07d954",
                "69a9dcfb52d16e09"
            ]
        ]
    },
    {
        "id": "2b29fd281e07d954",
        "type": "debug",
        "z": "269813c2b8029cb5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 600,
        "wires": []
    },
    {
        "id": "69a9dcfb52d16e09",
        "type": "function",
        "z": "269813c2b8029cb5",
        "name": "",
        "func": "msg1 = {};\nmsg.topic = \"ns=3;i=1008;datatype=Boolean\"\n\nif (msg.topic == \"ns=3;i=1008;datatype=Boolean\")\n{\n    if (msg.payload === 1)\n   { \n     msg1.payload = true;\n     msg1.topic=\"ns=3;i=1008;datatype=Boolean\"\n     return [msg1];\n    }\n    \n     if (msg.payload === 0)\n     {\n     msg1.payload = false;\n     msg1.topic=\"ns=3;i=1008;datatype=Boolean\"\n     return [msg1];\n     }\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 560,
        "wires": [
            [
                "e54c7e7c79e79ab1",
                "0c8735baab5ab687"
            ]
        ]
    },
    {
        "id": "0c8735baab5ab687",
        "type": "debug",
        "z": "269813c2b8029cb5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 580,
        "wires": []
    },
    {
        "id": "dc9017804366b82d",
        "type": "OpcUa-Client",
        "z": "13b08bfeb632c52a",
        "endpoint": "a6463b49.678438",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "",
        "x": 460,
        "y": 180,
        "wires": [
            [
                "02184fc9335fd5d1"
            ]
        ]
    },
    {
        "id": "ac6feb4b631bbdd1",
        "type": "OpcUa-Client",
        "z": "13b08bfeb632c52a",
        "endpoint": "a6463b49.678438",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "",
        "x": 360,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c52d56d247613f91",
        "type": "modbus-read",
        "z": "13b08bfeb632c52a",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "4096",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7e10f4e5.f87c2c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 500,
        "wires": [
            [
                "2c36dc3b9085c99d",
                "ee02d026108b56c6"
            ],
            []
        ]
    },
    {
        "id": "410f761d248a748f",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "Variables de Node-Red",
        "info": "",
        "x": 120,
        "y": 120,
        "wires": []
    },
    {
        "id": "bba075a023c8a701",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "Variables de PLC Delta",
        "info": "",
        "x": 120,
        "y": 400,
        "wires": []
    },
    {
        "id": "2c36dc3b9085c99d",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 350,
        "y": 500,
        "wires": []
    },
    {
        "id": "ee02d026108b56c6",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "To Client D0",
        "func": "msg.topic=\"ns=1;s=Delta.D0;datatype=Int16\";\nmsg.payload=msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 540,
        "wires": [
            [
                "43fe9c1d1c588419"
            ]
        ]
    },
    {
        "id": "43fe9c1d1c588419",
        "type": "OpcUa-Client",
        "z": "13b08bfeb632c52a",
        "endpoint": "a6463b49.678438",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "",
        "x": 600,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "9706e56f41ca8a2c",
        "type": "modbus-write",
        "z": "13b08bfeb632c52a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "4097",
        "quantity": "1",
        "server": "7e10f4e5.f87c2c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 740,
        "y": 900,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2f5e33e76b7a87a4",
        "type": "inject",
        "z": "13b08bfeb632c52a",
        "name": "D1",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "ns=1;s=Delta.D1;datatype=Int16",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=Delta.D1;datatype=Int16",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "a4963a998d892f14"
            ]
        ]
    },
    {
        "id": "a4963a998d892f14",
        "type": "OpcUa-Client",
        "z": "13b08bfeb632c52a",
        "endpoint": "a6463b49.678438",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "",
        "x": 300,
        "y": 800,
        "wires": [
            [
                "aca403a9b60318d1",
                "f43fd02fd06aaeb3",
                "75e22237ddec4ede",
                "09a117bcdb588a48"
            ]
        ]
    },
    {
        "id": "96dcf713086436d4",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 800,
        "wires": []
    },
    {
        "id": "ef0eb2f74774be4d",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "De PLC a servidor OPC UA",
        "info": "",
        "x": 140,
        "y": 440,
        "wires": []
    },
    {
        "id": "0e265d1becb4b587",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "De servidor OPC UA a PLC",
        "info": "",
        "x": 140,
        "y": 740,
        "wires": []
    },
    {
        "id": "0187d71212139402",
        "type": "inject",
        "z": "13b08bfeb632c52a",
        "name": "M0",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=Delta.M0;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "a4963a998d892f14"
            ]
        ]
    },
    {
        "id": "aca403a9b60318d1",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "M0",
        "func": "if (msg.topic == \"ns=1;s=Delta.M0\")\n{\nreturn msg;}",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 800,
        "wires": [
            [
                "96dcf713086436d4",
                "d26c49f8ef6e315e"
            ]
        ]
    },
    {
        "id": "f43fd02fd06aaeb3",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "D1",
        "func": "if (msg.topic == \"ns=1;s=Delta.D1\")\n{\nreturn msg;}",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 840,
        "wires": [
            [
                "e0075ec0e1a7e53d",
                "9706e56f41ca8a2c"
            ]
        ]
    },
    {
        "id": "e0075ec0e1a7e53d",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 840,
        "wires": []
    },
    {
        "id": "d26c49f8ef6e315e",
        "type": "modbus-write",
        "z": "13b08bfeb632c52a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "2048",
        "quantity": "1",
        "server": "7e10f4e5.f87c2c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 740,
        "y": 740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "47c25ce247f07719",
        "type": "modbus-read",
        "z": "13b08bfeb632c52a",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "1280",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7e10f4e5.f87c2c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "f4088929a9d8fec2",
                "59a31ac1496b00d4"
            ],
            []
        ]
    },
    {
        "id": "59a31ac1496b00d4",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "To Client Y0",
        "func": "msg.topic=\"ns=1;s=Delta.Y0;datatype=Boolean\";\nmsg.payload=msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "43fe9c1d1c588419"
            ]
        ]
    },
    {
        "id": "f4088929a9d8fec2",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 330,
        "y": 580,
        "wires": []
    },
    {
        "id": "b5c89d6f1d0e78e5",
        "type": "arduino in",
        "z": "13b08bfeb632c52a",
        "name": "",
        "pin": "0",
        "state": "ANALOG",
        "arduino": "f9e73317c999a441",
        "x": 90,
        "y": 1280,
        "wires": [
            [
                "3f44a72fa31f9b2d",
                "a51098a5877b5def"
            ]
        ]
    },
    {
        "id": "ec8e13985256da5e",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 490,
        "y": 1320,
        "wires": []
    },
    {
        "id": "8287c71f0dcc8b8a",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "Arduino Uno",
        "info": "",
        "x": 90,
        "y": 1140,
        "wires": []
    },
    {
        "id": "82d4f37fc53f2a7d",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "Analog Pin 0",
        "info": "",
        "x": 90,
        "y": 1220,
        "wires": []
    },
    {
        "id": "8989b283a50fd357",
        "type": "arduino in",
        "z": "13b08bfeb632c52a",
        "name": "",
        "pin": "1",
        "state": "ANALOG",
        "arduino": "f9e73317c999a441",
        "x": 90,
        "y": 1420,
        "wires": [
            [
                "b03d2e5acae00f61"
            ]
        ]
    },
    {
        "id": "139747adabf48a53",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 490,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b03d2e5acae00f61",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Conversion a grados C",
        "func": "msg.payload = ((msg.payload * 500)/1024)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1420,
        "wires": [
            [
                "139747adabf48a53",
                "754e40fb1110d153"
            ]
        ]
    },
    {
        "id": "bbea022afafcb023",
        "type": "ui_gauge",
        "z": "13b08bfeb632c52a",
        "name": "Potenciometro A0",
        "group": "b439aa6697087538",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Potenciometro A0",
        "label": "Voltaje",
        "format": "{{value|number:2}}",
        "min": 0,
        "max": "5",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 750,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3f44a72fa31f9b2d",
        "type": "range",
        "z": "13b08bfeb632c52a",
        "minin": "45",
        "maxin": "475",
        "minout": "0",
        "maxout": "5",
        "action": "clamp",
        "round": false,
        "property": "payload",
        "name": "Conversion a voltaje",
        "x": 300,
        "y": 1280,
        "wires": [
            [
                "ec8e13985256da5e",
                "19924a48f550ef07"
            ]
        ]
    },
    {
        "id": "069c20414ed06d99",
        "type": "ui_gauge",
        "z": "13b08bfeb632c52a",
        "name": "Temperatura A1",
        "group": "b439aa6697087538",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperatura A1",
        "label": "Grados celsius",
        "format": "{{value|number:2}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#33b0e6",
            "#f0b775",
            "#da6b10"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 740,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d4e4ba7f23a28cce",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "Analog Pin 1",
        "info": "",
        "x": 90,
        "y": 1360,
        "wires": []
    },
    {
        "id": "009b0f3c34eccc87",
        "type": "arduino out",
        "z": "13b08bfeb632c52a",
        "name": "",
        "pin": "2",
        "state": "OUTPUT",
        "arduino": "f9e73317c999a441",
        "x": 710,
        "y": 980,
        "wires": []
    },
    {
        "id": "81e2f36e4736919e",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "Digital Pin 2",
        "info": "",
        "x": 90,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5591d2ae4e93e16b",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "PWM Pin 3",
        "info": "",
        "x": 80,
        "y": 1740,
        "wires": []
    },
    {
        "id": "7baba9b1d3322ab4",
        "type": "ui_button",
        "z": "13b08bfeb632c52a",
        "name": "Encender",
        "group": "5e74200e.55d4e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Encender",
        "tooltip": "",
        "color": "",
        "bgcolor": "Green",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "ns=1;s=Arduino.Pin2;datatype=Boolean",
        "topicType": "str",
        "x": 100,
        "y": 1640,
        "wires": [
            [
                "c898faa721b2dd3f"
            ]
        ]
    },
    {
        "id": "3941606afccbf3ef",
        "type": "ui_button",
        "z": "13b08bfeb632c52a",
        "name": "Apagar",
        "group": "5e74200e.55d4e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Apagar",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "ns=1;s=Arduino.Pin2;datatype=Boolean",
        "topicType": "str",
        "x": 100,
        "y": 1680,
        "wires": [
            [
                "c898faa721b2dd3f"
            ]
        ]
    },
    {
        "id": "fc50f037fc320d55",
        "type": "ui_slider",
        "z": "13b08bfeb632c52a",
        "name": "Intensidad de LED",
        "label": "Intensidad de LED",
        "tooltip": "",
        "group": "5e74200e.55d4e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "ns=1;s=Arduino.Pin3;datatype=Int16",
        "topicType": "str",
        "min": "0",
        "max": "255",
        "step": 1,
        "className": "",
        "x": 130,
        "y": 1780,
        "wires": [
            [
                "ad9776503f95dbd6"
            ]
        ]
    },
    {
        "id": "ea5d27440a47feae",
        "type": "arduino out",
        "z": "13b08bfeb632c52a",
        "name": "",
        "pin": "3",
        "state": "PWM",
        "arduino": "f9e73317c999a441",
        "x": 710,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f893e9302d4e44e0",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "De Arduino a servidor OPC UA",
        "info": "",
        "x": 150,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5d22961ab5d5bb14",
        "type": "comment",
        "z": "13b08bfeb632c52a",
        "name": "De servidor OPC UA a Arduino",
        "info": "",
        "x": 150,
        "y": 1540,
        "wires": []
    },
    {
        "id": "19924a48f550ef07",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Al Servidor",
        "func": "msg.topic = \"ns=1;s=Arduino.A0;datatype=Float\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1360,
        "wires": [
            [
                "7bc97a84ddeb514d"
            ]
        ]
    },
    {
        "id": "7bc97a84ddeb514d",
        "type": "link out",
        "z": "13b08bfeb632c52a",
        "name": "ArduinoA0",
        "links": [
            "75591b62d845ac4f"
        ],
        "x": 655,
        "y": 1360,
        "wires": []
    },
    {
        "id": "75591b62d845ac4f",
        "type": "link in",
        "z": "13b08bfeb632c52a",
        "name": "",
        "links": [
            "7bc97a84ddeb514d",
            "968f8b1b753e1c92",
            "c898faa721b2dd3f",
            "ad9776503f95dbd6"
        ],
        "x": 395,
        "y": 660,
        "wires": [
            [
                "43fe9c1d1c588419",
                "5fe1cdfbe255d391"
            ]
        ]
    },
    {
        "id": "5fe1cdfbe255d391",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 570,
        "y": 660,
        "wires": []
    },
    {
        "id": "754e40fb1110d153",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Al Servidor",
        "func": "msg.topic = \"ns=1;s=Arduino.A1;datatype=Float\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1500,
        "wires": [
            [
                "968f8b1b753e1c92"
            ]
        ]
    },
    {
        "id": "968f8b1b753e1c92",
        "type": "link out",
        "z": "13b08bfeb632c52a",
        "name": "ArduinoA1",
        "links": [
            "75591b62d845ac4f"
        ],
        "x": 655,
        "y": 1500,
        "wires": []
    },
    {
        "id": "d06f1f5f5cd5321d",
        "type": "ui_numeric",
        "z": "13b08bfeb632c52a",
        "name": "Variable Double",
        "label": "Variable Double",
        "tooltip": "",
        "group": "c8ca0c4a21dcf973",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "ns=1;s=Variable1;datatype=Double",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "step": 1,
        "className": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "ac6feb4b631bbdd1"
            ]
        ]
    },
    {
        "id": "6c38b27cb4f15ba2",
        "type": "ui_text_input",
        "z": "13b08bfeb632c52a",
        "name": "Variable Int16",
        "label": "Variable Int16",
        "tooltip": "",
        "group": "c8ca0c4a21dcf973",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "100",
        "topic": "ns=1;s=Variable2;datatype=Int16",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "ac6feb4b631bbdd1"
            ]
        ]
    },
    {
        "id": "b6b4c41be7c51aca",
        "type": "inject",
        "z": "13b08bfeb632c52a",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "9f2c6ad73201264d"
            ]
        ]
    },
    {
        "id": "9f2c6ad73201264d",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Interpreta datos",
        "func": "msg1 = {};\nmsg2 = {};\nmsg3 = {};\n\n\nmsg1.topic=\"ns=1;s=Variable1;datatype=Double\";\nmsg2.topic=\"ns=1;s=Variable2;datatype=Int16\";\nmsg3.topic=\"ns=1;s=Variable3;datatype=Boolean\";\n\nreturn [msg1, msg2, msg3];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 180,
        "wires": [
            [
                "dc9017804366b82d"
            ],
            [
                "dc9017804366b82d"
            ],
            [
                "dc9017804366b82d"
            ]
        ]
    },
    {
        "id": "02184fc9335fd5d1",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Separa",
        "func": "msg1 = {};\nmsg2 = {};\nmsg3 = {};\n\n\nif(msg.topic==\"ns=1;s=Variable1\")\n{\n    msg1.payload=msg.payload;\n    msg1.topic=\"Variable 1;\"\n    return [msg1, null, null];\n    \n}\n\nif(msg.topic==\"ns=1;s=Variable2\")\n{\n    msg2.payload=msg.payload;\n    msg2.topic=\"Variable 2;\"\n    return [null, msg2, null];\n\n}\n\nif(msg.topic==\"ns=1;s=Variable3\")\n{\n    msg3.payload=msg.payload;\n    msg3.topic=\"Variable 3;\"\n    return [null, null, msg3];\n\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "89af16bd0c116e50"
            ],
            [
                "63a5a3bf9a7ebdd0"
            ],
            [
                "d36ac73a2e7ecedb",
                "83d1c69c05a23d8e",
                "7a933521eab71c7c"
            ]
        ]
    },
    {
        "id": "89af16bd0c116e50",
        "type": "ui_text",
        "z": "13b08bfeb632c52a",
        "group": "fa560be65b703c6e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Variable Double",
        "label": "Variable Double",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 140,
        "wires": []
    },
    {
        "id": "63a5a3bf9a7ebdd0",
        "type": "ui_text",
        "z": "13b08bfeb632c52a",
        "group": "fa560be65b703c6e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Variable Int16",
        "label": "Variable Int16",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 180,
        "wires": []
    },
    {
        "id": "d36ac73a2e7ecedb",
        "type": "ui_audio",
        "z": "13b08bfeb632c52a",
        "name": "Alerta de voz",
        "group": "fa560be65b703c6e",
        "voice": "urn:moz-tts:sapi:Microsoft Sabina Desktop - Spanish (Mexico)?es-MX",
        "always": true,
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "faee265dbc970306",
        "type": "ui_switch",
        "z": "13b08bfeb632c52a",
        "name": "Variable Boolean",
        "label": "Variable Boolean",
        "tooltip": "",
        "group": "c8ca0c4a21dcf973",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "ns=1;s=Variable3;datatype=Boolean",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "ac6feb4b631bbdd1"
            ]
        ]
    },
    {
        "id": "83d1c69c05a23d8e",
        "type": "rpi-gpio out",
        "z": "13b08bfeb632c52a",
        "name": "LED",
        "pin": "4",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 770,
        "y": 260,
        "wires": []
    },
    {
        "id": "54ccc5516447e575",
        "type": "OPCUA-IIoT-Flex-Server",
        "z": "13b08bfeb632c52a",
        "port": "55380",
        "endpoint": "",
        "acceptExternalCommands": true,
        "maxAllowedSessionNumber": "",
        "maxConnectionsPerEndpoint": "",
        "maxAllowedSubscriptionNumber": "",
        "alternateHostname": "",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "allowAnonymous": true,
        "individualCerts": false,
        "isAuditing": false,
        "serverDiscovery": true,
        "users": [],
        "xmlsets": [],
        "publicCertificateFile": "",
        "privateCertificateFile": "",
        "registerServerMethod": 1,
        "discoveryServerEndpointUrl": "",
        "capabilitiesForMDNS": "",
        "maxNodesPerRead": 1000,
        "maxNodesPerBrowse": 2000,
        "delayToClose": 1000,
        "addressSpaceScript": "function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n    // server = the created node-opcua server\n    // addressSpace = script placeholder\n    // eventObjects = to hold event variables in memory from this script\n    \n    // internal global sandbox objects are \n    // node = node of the flex server, \n    // coreServer = core iiot server object for debug and access to nodeOPCUA,\n    // and scriptObjects to hold variables and functions\n    const LocalizedText = coreServer.core.nodeOPCUA.LocalizedText\n    const namespace = addressSpace.getOwnNamespace()\n\n    coreServer.internalDebugLog('init dynamic address space')\n    node.warn('construct new address space for OPC UA')\n    \n    // from here - see the node-opcua docs how to build address sapces\n    let tanks = namespace.addObject({\n        browseName: 'Tanks',\n        description: 'The Object representing some tanks',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    let oilTankLevel = namespace.addVariable({\n        browseName: 'OilTankLevel',\n        displayName: [\n          new LocalizedText({text: 'Oil Tank Level', locale: 'en-US'}),\n          new LocalizedText({text: '√ñl Tank F√ºllstand', locale: 'de-DE'})\n        ],\n        description: 'Fill level in percentage (0% to 100%) of the oil tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    // ---------------------------------------------------------------------------------\n    // Let's create a exclusive Limit Alarm that automatically raise itself\n    // when the tank level is out of limit\n    // ---------------------------------------------------------------------------------\n    let exclusiveLimitAlarmType = addressSpace.findEventType('ExclusiveLimitAlarmType')\n    node.bianco.iiot.assert(exclusiveLimitAlarmType !== null)\n    \n    let oilTankLevelCondition = namespace.instantiateExclusiveLimitAlarm(exclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: oilTankLevel,\n        browseName: 'OilTankLevelCondition',\n        displayName: [\n          new LocalizedText({text: 'Oil Tank Level Condition', locale: 'en-US'}),\n          new LocalizedText({text: '√ñl Tank F√ºllstand Bedingung', locale: 'de-DE'})\n        ],\n        description: 'ExclusiveLimitAlarmType Condition',\n        conditionName: 'OilLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: oilTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // --------------------------------------------------------------\n    // Let's create a second letiable with no Exclusive alarm\n    // --------------------------------------------------------------\n    let gasTankLevel = namespace.addVariable({\n        browseName: 'GasTankLevel',\n        displayName: [\n          new LocalizedText({text: 'Gas Tank Level', locale: 'en-US'}),\n          new LocalizedText({text: 'Gas Tank F√ºllstand', locale: 'de-DE'})\n        ],\n        description: 'Fill level in percentage (0% to 100%) of the gas tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    let nonExclusiveLimitAlarmType = addressSpace.findEventType('NonExclusiveLimitAlarmType')\n    node.bianco.iiot.assert(nonExclusiveLimitAlarmType !== null)\n    \n    let gasTankLevelCondition = namespace.instantiateNonExclusiveLimitAlarm(nonExclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: gasTankLevel,\n        browseName: 'GasTankLevelCondition',\n        displayName: [\n          new LocalizedText({text: 'Gas Tank Level Condition', locale: 'en-US'}),\n          new LocalizedText({text: 'Gas Tank F√ºllstand Bedingung', locale: 'de-DE'})\n        ],\n        description: 'NonExclusiveLimitAlarmType Condition',\n        conditionName: 'GasLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: gasTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    \n    // Initial conditions for Node-RED variables with value---------------------------------------------\n    \n    if(scriptObjects.Variable1 === undefined || scriptObjects.Variable1 === null) {\n            scriptObjects.Variable1 = 0.0\n    }\n    \n        if(scriptObjects.Variable2 === undefined || scriptObjects.Variable2 === null) {\n            scriptObjects.Variable2 = 0.0\n    }\n    \n            if(scriptObjects.Variable3 === undefined || scriptObjects.Variable3 === null) {\n            scriptObjects.Variable3 = false\n    }\n    \n\t    \n    // Initial conditions for Delta PLC variables with value---------------------------------------------\n    \n    if(scriptObjects.D0 === undefined || scriptObjects.D0 === null) {\n            scriptObjects.D0 = 0\n\t}\n\tif(scriptObjects.D1 === undefined || scriptObjects.D1 === null) {\n            scriptObjects.D1 = 0\n\t\t}\n\t\t\n\tif(scriptObjects.M0 === undefined || scriptObjects.M0 === null) {\n            scriptObjects.M0 = false\n\t\t}\n\t\t\n\tif(scriptObjects.Y0 === undefined || scriptObjects.Y0 === null) {\n            scriptObjects.Y0 = false\n\t\t}\n\t\n\t\n\t    // Initial conditions for Arduino variables with value---------------------------------------------\n    \n    if(scriptObjects.A0 === undefined || scriptObjects.A0 === null) {\n            scriptObjects.A0 = 0.0\n\t}\n\tif(scriptObjects.A1 === undefined || scriptObjects.A1 === null) {\n            scriptObjects.A1 = 0.0\n\t\t}\n\t\t\n\tif(scriptObjects.Pin2 === undefined || scriptObjects.Pin2 === null) {\n            scriptObjects.Pin2 = false\n\t\t}\n\t\t\n\tif(scriptObjects.Pin3 === undefined || scriptObjects.Pin3 === null) {\n            scriptObjects.Pin3 = 0\n\t\t}\n\t\n\t\n\t\n    //Creating objects in the OPC UA server------------------------------------------------\n    \n    let myVariable1 = namespace.addObject({\n        browseName: 'Variables Node-Red',\n        description: 'El objeto representa algunas variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n\t  let myVariable2 = namespace.addObject({\n        browseName: 'Variables de PLC Delta',\n        description: 'El objeto representa algunas variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n\tlet myVariable3 = namespace.addObject({\n        browseName: 'Variables de Arduino',\n        description: 'El objeto representa algunas variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    \n    \n    // Defining tab properties for Node-RED variables-----------------------------\n    \n    if(coreServer.core) \n    {\n        \n        namespace.addVariable({\n            componentOf: myVariable1,\n            nodeId: 'ns=1;s=Variable1',\n            browseName: 'Variable1',\n            displayName: [\n                new LocalizedText({text: 'Variable1', locale: 'en-US'}),\n                new LocalizedText({text: 'Variable1', locale: 'de-DE'})\n            ],\n            dataType: 'Double',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Double',\n                        value: scriptObjects.Variable1\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.Variable1 = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n        namespace.addVariable({\n            componentOf: myVariable1,\n            nodeId: 'ns=1;s=Variable2',\n            browseName: 'Variable2',\n            displayName: [\n                new LocalizedText({text: 'Variable2', locale: 'en-US'}),\n                new LocalizedText({text: 'Variable2', locale: 'de-DE'})\n            ],\n            dataType: 'Int16',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Int16',\n                        value: scriptObjects.Variable2\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.Variable2 = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n           namespace.addVariable({\n            componentOf: myVariable1,\n            nodeId: 'ns=1;s=Variable3',\n            browseName: 'Variable3',\n            displayName: [\n                new LocalizedText({text: 'Variable3', locale: 'en-US'}),\n                new LocalizedText({text: 'Variable3', locale: 'de-DE'})\n            ],\n            dataType: 'Boolean',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Boolean',\n                        value: scriptObjects.Variable3\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.Variable3 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n\t\t\n\t\t// Delta PLC variables\n\t\t\n\t\t      namespace.addVariable({\n            componentOf: myVariable2,\n            nodeId: 'ns=1;s=Delta.D0',\n            browseName: 'Delta.D0',\n            displayName: [\n                new LocalizedText({text: 'Delta.D0', locale: 'en-US'}),\n                new LocalizedText({text: 'Delta.D0', locale: 'de-DE'})\n            ],\n            dataType: 'Int16',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Int16',\n                        value: scriptObjects.D0\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.D0 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\n\t\t\n\t\t      namespace.addVariable({\n            componentOf: myVariable2,\n            nodeId: 'ns=1;s=Delta.D1',\n            browseName: 'Delta.D1',\n            displayName: [\n                new LocalizedText({text: 'Delta.D1', locale: 'en-US'}),\n                new LocalizedText({text: 'Delta.D1', locale: 'de-DE'})\n            ],\n            dataType: 'Int16',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Int16',\n                        value: scriptObjects.D1\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.D1 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n        \n        \t      namespace.addVariable({\n            componentOf: myVariable2,\n            nodeId: 'ns=1;s=Delta.M0',\n            browseName: 'Delta.M0',\n            displayName: [\n                new LocalizedText({text: 'Delta.M0', locale: 'en-US'}),\n                new LocalizedText({text: 'Delta.M0', locale: 'de-DE'})\n            ],\n            dataType: 'Boolean',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Boolean',\n                        value: scriptObjects.M0\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.M0 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\t\t     \t      namespace.addVariable({\n            componentOf: myVariable2,\n            nodeId: 'ns=1;s=Delta.Y0',\n            browseName: 'Delta.Y0',\n            displayName: [\n                new LocalizedText({text: 'Delta.Y0', locale: 'en-US'}),\n                new LocalizedText({text: 'Delta.Y0', locale: 'de-DE'})\n            ],\n            dataType: 'Boolean',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Boolean',\n                        value: scriptObjects.Y0\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.Y0 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\t\t\n\t\t//Arduino variables definitions\n\t\t\n\t\tnamespace.addVariable({\n            componentOf: myVariable3,\n            nodeId: 'ns=1;s=Arduino.A0',\n            browseName: 'Arduino.A0',\n            displayName: [\n                new LocalizedText({text: 'Arduino.A0', locale: 'en-US'}),\n                new LocalizedText({text: 'Arduino.A0', locale: 'de-DE'})\n            ],\n            dataType: 'Float',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Float',\n                        value: scriptObjects.A0\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.A0 = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\t\t\tnamespace.addVariable({\n            componentOf: myVariable3,\n            nodeId: 'ns=1;s=Arduino.A1',\n            browseName: 'Arduino.A1',\n            displayName: [\n                new LocalizedText({text: 'Arduino.A1', locale: 'en-US'}),\n                new LocalizedText({text: 'Arduino.A1', locale: 'de-DE'})\n            ],\n            dataType: 'Float',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Float',\n                        value: scriptObjects.A1\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.A1 = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\t\t\n\t\tnamespace.addVariable({\n            componentOf: myVariable3,\n            nodeId: 'ns=1;s=Arduino.Pin2',\n            browseName: 'Arduino.Pin2',\n            displayName: [\n                new LocalizedText({text: 'Arduino.Pin2', locale: 'en-US'}),\n                new LocalizedText({text: 'Arduino.Pin2', locale: 'de-DE'})\n            ],\n            dataType: 'Boolean',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Boolean',\n                        value: scriptObjects.Pin2\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.Pin2 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\t\tnamespace.addVariable({\n            componentOf: myVariable3,\n            nodeId: 'ns=1;s=Arduino.Pin3',\n            browseName: 'Arduino.Pin3',\n            displayName: [\n                new LocalizedText({text: 'Arduino.Pin3', locale: 'en-US'}),\n                new LocalizedText({text: 'Arduino.Pin3', locale: 'de-DE'})\n            ],\n            dataType: 'Int16',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Int16',\n                        value: scriptObjects.Pin3\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.Pin3 = variant.value\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n\t\t\n\t\t\n\t\t\n\t\t\n        \n        \n        let memoryVariable = namespace.addVariable({\n            componentOf: myVariable1,\n            nodeId: 'ns=1;s=free_memory',\n            browseName: 'FreeMemory',\n            displayName: [\n                new LocalizedText({text: 'Free Memory', locale: 'en-US'}),\n                new LocalizedText({text: 'Memoria libre', locale: 'de-DE'})\n            ],\n            dataType: 'Double',\n            \n            value: {\n              get: function () {\n                return new coreServer.core.nodeOPCUA.Variant({\n                  dataType: 'Double',\n                  value: coreServer.core.availableMemory()\n                })\n              }\n            }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n       \n    } else {\n        coreServer.internalDebugLog('coreServer.core needed for coreServer.core.nodeOPCUA')\n    }\n\n    // hold event objects in memory \n    eventObjects.oilTankLevel = oilTankLevel\n    eventObjects.oilTankLevelCondition = oilTankLevelCondition\n    \n    eventObjects.gasTankLevel = gasTankLevel\n    eventObjects.gasTankLevelCondition = gasTankLevelCondition\n    \n    done()\n}",
        "x": 90,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7a933521eab71c7c",
        "type": "ui_led",
        "z": "13b08bfeb632c52a",
        "order": 3,
        "group": "fa560be65b703c6e",
        "width": 0,
        "height": 0,
        "label": "Led Raspberry",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#000000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Led Raspberry",
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "c898faa721b2dd3f",
        "type": "link out",
        "z": "13b08bfeb632c52a",
        "name": "",
        "mode": "link",
        "links": [
            "75591b62d845ac4f"
        ],
        "x": 245,
        "y": 1660,
        "wires": []
    },
    {
        "id": "ad9776503f95dbd6",
        "type": "link out",
        "z": "13b08bfeb632c52a",
        "name": "",
        "mode": "link",
        "links": [
            "75591b62d845ac4f"
        ],
        "x": 255,
        "y": 1780,
        "wires": []
    },
    {
        "id": "75e22237ddec4ede",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Separa",
        "func": "msg1 = {};\nmsg2 = {};\nmsg3 = {};\nmsg4 = {};\n\n\nif (msg.topic == \"ns=1;s=Arduino.Pin2\")\n{\n    if (msg.payload === true)\n   { \n     msg1.payload = 1;\n     msg1.topic=\"Pin2;\"\n     return [msg1, null, null, null];\n    }\n    \n     if (msg.payload === false)\n     {\n     msg1.payload = 0;\n     msg1.topic=\"Pin2;\"\n     return [msg1, null, null, null];\n     }\n}\n\nif (msg.topic == \"ns=1;s=Arduino.Pin3\")\n{\n     msg2.payload=msg.payload;\n     msg2.topic=\"Pin3\"\n     return [null, msg2, null, null];\n}\n\nif (msg.topic == \"ns=1;s=Arduino.A0\")\n{\n     msg3.payload=msg.payload;\n     msg3.topic=\"PinA0\"\n     return [null, null, msg3, null];\n}\n\nif (msg.topic == \"ns=1;s=Arduino.A1\")\n{\n     msg4.payload=msg.payload;\n     msg4.topic=\"PinA1\"\n     return [null, null, null, msg4];\n}\n\n//return [msg1, msg2, msg3, msg4];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1020,
        "wires": [
            [
                "009b0f3c34eccc87"
            ],
            [
                "ea5d27440a47feae"
            ],
            [
                "bbea022afafcb023"
            ],
            [
                "069c20414ed06d99"
            ]
        ]
    },
    {
        "id": "09a117bcdb588a48",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 920,
        "wires": []
    },
    {
        "id": "0acb52add4dd7ac4",
        "type": "inject",
        "z": "13b08bfeb632c52a",
        "name": "",
        "props": [],
        "repeat": ".99",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 940,
        "wires": [
            [
                "8d864295f99c3253"
            ]
        ]
    },
    {
        "id": "8d864295f99c3253",
        "type": "function",
        "z": "13b08bfeb632c52a",
        "name": "Interpreta datos",
        "func": "msg1 = {};\nmsg2 = {};\nmsg3 = {};\nmsg4 = {};\n\nmsg1.topic=\"ns=1;s=Arduino.Pin2;datatype=Boolean\";\nmsg2.topic=\"ns=1;s=Arduino.Pin3;datatype=Int16\";\nmsg3.topic=\"ns=1;s=Arduino.A0;datatype=Float\";\nmsg4.topic=\"ns=1;s=Arduino.A1;datatype=Float\";\n\nreturn [msg1, msg2, msg3, msg4];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 940,
        "wires": [
            [
                "a4963a998d892f14"
            ],
            [
                "a4963a998d892f14"
            ],
            [
                "a4963a998d892f14"
            ],
            [
                "a4963a998d892f14"
            ]
        ]
    },
    {
        "id": "a51098a5877b5def",
        "type": "debug",
        "z": "13b08bfeb632c52a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e643c78e.1fe608",
        "type": "file",
        "z": "6d737813fc1388fc",
        "name": "Address.txt",
        "filename": "./public/users/opc-ua/Address.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 830,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "75ff66ac.f39498",
        "type": "comment",
        "z": "6d737813fc1388fc",
        "name": "PROSYS OPC-UA",
        "info": "using the PROSYS OPC-UA Simulation Server",
        "x": 110,
        "y": 240,
        "wires": []
    },
    {
        "id": "fd7bd63d.2f3178",
        "type": "OpcUa-Item",
        "z": "6d737813fc1388fc",
        "item": "ns=5;s=Random1",
        "datatype": "Integer",
        "value": "",
        "name": "Random1",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "a6eb9ec.c21db6"
            ]
        ]
    },
    {
        "id": "2dd2dd3c.5d9b72",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Read",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "fd7bd63d.2f3178"
            ]
        ]
    },
    {
        "id": "8b2daf0a.2ac5b",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "Read value Payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 860,
        "y": 340,
        "wires": []
    },
    {
        "id": "7b069e3f.171f5",
        "type": "OpcUa-Item",
        "z": "6d737813fc1388fc",
        "item": "ns=4;s=DateTime",
        "datatype": "String",
        "value": "",
        "name": "DateTime",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "a6eb9ec.c21db6",
                "b289b3e3.c303"
            ]
        ]
    },
    {
        "id": "a6eb9ec.c21db6",
        "type": "OpcUa-Client",
        "z": "6d737813fc1388fc",
        "endpoint": "b15ae0fd.c3766",
        "action": "read",
        "deadbandvalue": "",
        "time": "",
        "localfile": "",
        "localkeyfile": "",
        "name": "Test server (read items)",
        "x": 590,
        "y": 340,
        "wires": [
            [
                "8b2daf0a.2ac5b",
                "ef2f258a.509a58"
            ]
        ]
    },
    {
        "id": "c4e6019e.66af7",
        "type": "OpcUa-Item",
        "z": "6d737813fc1388fc",
        "item": "i=2258",
        "datatype": "String",
        "value": "",
        "name": "Server CurrentTime",
        "x": 390,
        "y": 420,
        "wires": [
            [
                "b289b3e3.c303"
            ]
        ]
    },
    {
        "id": "4ec38626.22afb8",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Subscribe ( Interval 1 sec.)",
        "props": [
            {
                "p": "payload",
                "v": "1000",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "1000",
        "payloadType": "num",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "c4e6019e.66af7",
                "c2e67110.f1efa"
            ]
        ]
    },
    {
        "id": "de7b113d.00879",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Browse",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "ns=2;s=MyDevice",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "ns=2;s=MyDevice",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "fb399d4f.61dc4",
                "19dfffe3.6c26c"
            ]
        ]
    },
    {
        "id": "7cb5d30d.2e00ec",
        "type": "file",
        "z": "6d737813fc1388fc",
        "name": "Address.txt",
        "filename": "./public/users/opc-ua/Address.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "28d77e5.8101482",
        "type": "function",
        "z": "6d737813fc1388fc",
        "name": "Items",
        "func": "msg.payload=msg.browseName+\"|\"+msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 120,
        "wires": [
            [
                "7cb5d30d.2e00ec",
                "b10ffb29.47ab88"
            ]
        ]
    },
    {
        "id": "fb399d4f.61dc4",
        "type": "trigger",
        "z": "6d737813fc1388fc",
        "name": "Clear file",
        "op1": "object|address",
        "op2": "0",
        "op1type": "val",
        "op2type": "",
        "duration": "0",
        "extend": "false",
        "units": "ms",
        "outputs": 1,
        "x": 460,
        "y": 60,
        "wires": [
            [
                "e643c78e.1fe608"
            ]
        ]
    },
    {
        "id": "19dfffe3.6c26c",
        "type": "OpcUa-Client",
        "z": "6d737813fc1388fc",
        "endpoint": "b15ae0fd.c3766",
        "action": "browse",
        "deadbandvalue": "",
        "time": "",
        "localfile": "",
        "localkeyfile": "",
        "name": "Test server (browse)",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "28d77e5.8101482",
                "bd51e6e9.102cf8"
            ]
        ]
    },
    {
        "id": "ca827ee0.3633a",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "Subscribed values",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 850,
        "y": 420,
        "wires": []
    },
    {
        "id": "b10ffb29.47ab88",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "Address items",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "77256a3c.71f1d4",
        "type": "comment",
        "z": "6d737813fc1388fc",
        "name": "v9.1.0",
        "info": "Browse node allows user to select item:\n- runtime browse\n- select RootFolder -> SubFolder\n- select Item\n\nActions:\nread\nwrite\nbrowse\nsubscribe\n\nNodes:\nclient node for actions\nitem node for defining item\n",
        "x": 70,
        "y": 200,
        "wires": []
    },
    {
        "id": "2ec2bede.18aba2",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Browse Alarm",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "ns=2;s=MyLevel.Alarm",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "ns=2;s=MyLevel.Alarm",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "60103cf1.60b664"
            ]
        ]
    },
    {
        "id": "bd51e6e9.102cf8",
        "type": "template",
        "z": "6d737813fc1388fc",
        "name": "OpcUa-Item",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "mustache",
        "template": "[\n  {\n    \"id\": \"4b12ca9b.e7e184\",\n    \"type\": \"OpcUa-Item\",\n    \"item\": \"{{topic}}\",\n    \"datatype\": \"opcua.DataType.Double\",\n    \"value\": \"66.6\",\n    \"name\": \"{{browseName}}\",\n    \"x\": 251,\n    \"y\": 334,\n    \"z\": \"30ffd2ee.59fdd6\",\n    \"wires\": [\n      [\n        \"70dd1397.3c8e44\"\n      ]\n    ]\n  }\n]",
        "x": 530,
        "y": 180,
        "wires": [
            [
                "251746cc.116c3a",
                "d7e87799.e5bba8"
            ]
        ]
    },
    {
        "id": "251746cc.116c3a",
        "type": "function",
        "z": "6d737813fc1388fc",
        "name": "Save to lib",
        "func": "msg.filename=\"./public/users/opc-ua/templates/\"+msg.browseName+\".js\";\nmsg.payload=\"// name: \"+msg.browseName+\"\\n\"+\"// field: payload\\n\"+msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "d5eda8e6.d58238",
                "3826e0f3.91b6d"
            ]
        ]
    },
    {
        "id": "d5eda8e6.d58238",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "Pre-configured library items",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 880,
        "y": 280,
        "wires": []
    },
    {
        "id": "3826e0f3.91b6d",
        "type": "file",
        "z": "6d737813fc1388fc",
        "name": "OPC UA Items",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 840,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d7e87799.e5bba8",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "1caef89f.2ed4e7",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Read",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 340,
        "wires": [
            [
                "27c2bd79.578a32"
            ]
        ]
    },
    {
        "id": "27c2bd79.578a32",
        "type": "OpcUa-Item",
        "z": "6d737813fc1388fc",
        "item": "ns=5;s=Counter1",
        "datatype": "Double",
        "value": "",
        "name": "Counter1",
        "x": 360,
        "y": 340,
        "wires": [
            [
                "a6eb9ec.c21db6"
            ]
        ]
    },
    {
        "id": "60103cf1.60b664",
        "type": "OpcUa-Client",
        "z": "6d737813fc1388fc",
        "endpoint": "b15ae0fd.c3766",
        "action": "browse",
        "deadbandvalue": "",
        "time": "10000",
        "localfile": "",
        "localkeyfile": "",
        "name": "",
        "x": 380,
        "y": 520,
        "wires": [
            [
                "7ceef407.eafb3c",
                "926dc4c4.041508"
            ]
        ]
    },
    {
        "id": "7ceef407.eafb3c",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "Browsed JSON",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 840,
        "y": 520,
        "wires": []
    },
    {
        "id": "926dc4c4.041508",
        "type": "function",
        "z": "6d737813fc1388fc",
        "name": "Read Info",
        "func": "msg.payload=msg.browseName+\" - \"+msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 560,
        "wires": [
            [
                "1af9b387.3278dc"
            ]
        ]
    },
    {
        "id": "1af9b387.3278dc",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "browseName",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 830,
        "y": 560,
        "wires": []
    },
    {
        "id": "b289b3e3.c303",
        "type": "OpcUa-Client",
        "z": "6d737813fc1388fc",
        "endpoint": "b15ae0fd.c3766",
        "action": "subscribe",
        "deadbandvalue": "",
        "time": "4",
        "timeUnit": "s",
        "localfile": "",
        "localkeyfile": "",
        "name": "",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "ca827ee0.3633a",
                "ef2f258a.509a58"
            ]
        ]
    },
    {
        "id": "f6f54112.c9ed4",
        "type": "catch",
        "z": "6d737813fc1388fc",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 700,
        "wires": [
            [
                "3b51ffbd.c887f"
            ]
        ]
    },
    {
        "id": "3b51ffbd.c887f",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 370,
        "y": 700,
        "wires": []
    },
    {
        "id": "6868efd9.25a6c",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Read & Subscribe",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "500",
        "payloadType": "num",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "7b069e3f.171f5"
            ]
        ]
    },
    {
        "id": "e7585aa3.d5d658",
        "type": "OpcUa-Event",
        "z": "6d737813fc1388fc",
        "root": "ns=2;s=MyLevel.Alarm",
        "eventtype": "i=2041",
        "name": "All events from server",
        "x": 400,
        "y": 620,
        "wires": [
            [
                "6b885842.c7dfb8"
            ]
        ]
    },
    {
        "id": "983dcde4.57503",
        "type": "inject",
        "z": "6d737813fc1388fc",
        "name": "Subscribe Events (250ms)",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "250",
        "payloadType": "num",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "e7585aa3.d5d658"
            ]
        ]
    },
    {
        "id": "ff34939.6bc5c7",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 910,
        "y": 620,
        "wires": []
    },
    {
        "id": "6b885842.c7dfb8",
        "type": "OpcUa-Client",
        "z": "6d737813fc1388fc",
        "endpoint": "b15ae0fd.c3766",
        "action": "events",
        "deadbandvalue": "",
        "time": "10",
        "timeUnit": "s",
        "localfile": "",
        "localkeyfile": "",
        "name": "Alarms & Events",
        "x": 620,
        "y": 620,
        "wires": [
            [
                "ff34939.6bc5c7",
                "dc6df03d.b2e26"
            ]
        ]
    },
    {
        "id": "dc6df03d.b2e26",
        "type": "function",
        "z": "6d737813fc1388fc",
        "name": "Format",
        "func": "var newmsg={};\nnewmsg.topic=\"\";\nnewmsg.payload=\"\";\n\nif (msg.EventId) {\n    //newmsg.payload=\"EVENTID\";\n\t//newmsg.payload=msg.EventId.toString('utf8');;\n}\nif (msg.EventType) {\n    //newmsg.topic=newmsg.topic+\"EventType\";\n    //newmsg.payload=\"EVENTTYPE\";\n\t//newmsg.payload=newmsg.payload+\"|\"+msg.EventType;\n}\nif (msg.SourceNode) {\n    //newmsg.topic=newmsg.topic+\"SourceNode\";\n\t//newmsg.payload=msg.payload+\"|\"+msg.SourceNode;\n}\nif (msg.SourceName) {\n    // Do not show internal alarm state changes e.q. rising events\n    //if (msg.SourceName==\"Internal\") return; \n\tnewmsg.payload=newmsg.payload+\"|\"+msg.SourceName;\n}\nif (msg.Time) {\n    newmsg.topic=newmsg.topic+\"|\"+\"Time\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Time;\n}\nif (msg.ReceiveTime) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ReceiveTime\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ReceiveTime;\n}\nif (msg.Message) {\n    newmsg.topic=newmsg.topic+\"|\"+\"Message\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Message;\n}\nif (msg.Severity) {\n    newmsg.topic=newmsg.topic+\"|\"+\"Severity\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Severity;\n}\n\n// ConditionType\nif (msg.ConditionClassId) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ConditionClassId\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ConditionClassId;\n}\nif (msg.ConditionClassName) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ConditionClassName\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ConditionClassNameName;\n}\nif (msg.ConditionName) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ConditionName\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ConditionName;\n}\nif (msg.BranchId) {\n    newmsg.topic=newmsg.topic+\"|\"+\"BranchId\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.BranchId;\n}\nif (msg.Retain) {\n    newmsg.topic=newmsg.topic+\"|\"+\"Retain\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Retain;\n}\nif (msg.EnabledState) {\n    newmsg.topic=newmsg.topic+\"|\"+\"EnabledState\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.EnabledState;\n}\nif (msg.Quality) {\n    newmsg.topic=newmsg.topic+\"|\"+\"Quality\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Quality;\n}\nif (msg.LastSeverity) {\n    newmsg.topic=newmsg.topic+\"|\"+\"LastSeverity\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.LastSeverity;\n}\nif (msg.Comment) {\n    newmsg.topic=newmsg.topic+\"|\"+\"Comment\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Comment;\n}\nif (msg.ClientUserId) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ClientUserId\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ClientUserId;\n}\n\n// AcknowledgeConditionType\nif (msg.AckedState) {\n    newmsg.topic=newmsg.topic+\"|\"+\"AckedState\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.AckedState;\n}\nif (msg.ConfirmedState) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ConfirmedState\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ConfirmedState;\n}\n\n// AlarmConditionType\nif (msg.ActiveState) {\n    newmsg.topic=newmsg.topic+\"|\"+\"ActiveState\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.ActiveState;\n}\nif (msg.InputNode) {\n    newmsg.topic=newmsg.topic+\"|\"+\"InputNode\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.InputNode;\n}\nif (msg.SupressedState) {\n    newmsg.topic=newmsg.topic+\"|\"+\"SupressedState\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.SupressedState;\n}\n\n// Limits\nif (msg.HighHighLimit) {\n    newmsg.topic=newmsg.topic+\"|\"+\"HighHighLimit\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.HighHighLimit;\n}\nif (msg.HighLimit) {\n    newmsg.topic=newmsg.topic+\"|\"+\"HighLimit\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.HighLimit;\n}\nif (msg.LowLimit) {\n    newmsg.topic=newmsg.topic+\"|\"+\"LowLimit\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.LowLimit;\n}\nif (msg.LowLowLimit) {\n    newmsg.topic=newmsg.topic+\"|\"+\"LowLowLimit\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.LowLowLimit;\n}\nif (msg.Value) {\n        newmsg.topic=newmsg.topic+\"|\"+\"Value\";\n\tnewmsg.payload=newmsg.payload+\"|\"+msg.Value;\n}\n\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 680,
        "wires": [
            [
                "ff34939.6bc5c7"
            ]
        ]
    },
    {
        "id": "ef2f258a.509a58",
        "type": "debug",
        "z": "6d737813fc1388fc",
        "name": "Complete Message",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "c2e67110.f1efa",
        "type": "OpcUa-Item",
        "z": "6d737813fc1388fc",
        "item": "ns=2;s=MyLevel",
        "datatype": "Double",
        "value": "",
        "name": "MyDevice - MyLevel",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "b289b3e3.c303"
            ]
        ]
    }
]