[{"id":"27c222c7.c4c10e","type":"tab","label":"OPC UA Arduino Data","disabled":false,"info":"Datos de sensores de Arduino Uno comunicados por puerto serial para servidor de prueba de OPC UA "},{"id":"4cc35445.18134c","type":"tab","label":"Prosys Server","disabled":false,"info":""},{"id":"71d3bc79.167b54","type":"tab","label":"OPC UA Server Node-Red","disabled":false,"info":""},{"id":"535891d2.b4dea","type":"OpcUa-Endpoint","endpoint":"opc.tcp://192.168.1.71:53530/OPCUA/SimulationServer","secpol":"None","secmode":"None","login":true},{"id":"7a64650c.9b1d54","type":"serial-port","serialport":"/dev/ttyACM0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"6c9747ae.558e58","type":"ui_tab","name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"9de0b797.2888f","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#094777","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#094777","edited":true},"page-titlebar-backgroundColor":{"value":"#094777","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#333333","edited":false},"group-textColor":{"value":"#0e71be","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#094777","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Cliente Node-Red: OPC UA","hideToolbar":"false","allowSwipe":"true","lockMenu":"true","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"535b72c3.b2d50c","type":"ui_group","name":"Lecturas","tab":"6c9747ae.558e58","order":1,"disp":true,"width":"6","collapse":true},{"id":"1be80844.215908","type":"OpcUa-Endpoint","endpoint":"opc.tcp://localhost:54840","secpol":"None","secmode":"None","login":false},{"id":"65521fcd.5d99a","type":"ui_tab","name":"Prueba","icon":"dashboard","disabled":false,"hidden":false},{"id":"e3715be7.8ca9b8","type":"ui_group","name":"OPC UA Server","tab":"65521fcd.5d99a","order":1,"disp":true,"width":"6","collapse":false},{"id":"b15ae0fd.c3766","type":"OpcUa-Endpoint","endpoint":"opc.tcp://192.168.1.80:53530/OPCUA/SimulationServer","secpol":"None","secmode":"None","login":true},{"id":"8ccde753df4827a0","type":"OpcUa-Endpoint","endpoint":"opc.tcp://localhost:53880/","secpol":"None","secmode":"None","login":false},{"id":"e51cd6e7.ddba","type":"serial in","z":"27c222c7.c4c10e","name":"Arduino","serial":"7a64650c.9b1d54","x":90,"y":280,"wires":[["6fddc939.d601a8"]]},{"id":"6fddc939.d601a8","type":"split","z":"27c222c7.c4c10e","name":"Separador","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":250,"y":280,"wires":[["2aeedfb2.4f963"]]},{"id":"f4860197.5a895","type":"function","z":"27c222c7.c4c10e","name":"Interpreta datos","func":"msg1 = {};\nmsg2 = {};\nmsg3 = {};\n\nif (msg.payload[3]){\n    var PB = msg.payload;\n    msg1.payload = PB;\n    msg1.topic = \"Pushbutton;\"\n}\n\nif (msg.payload[7]){\n    var Temperatura = msg.payload;\n    msg2.payload = Temperatura;\n    msg2.topic = \"Temperatura;\"\n}\n\nif (msg.payload[6]){\n    var Potenciometro= msg.payload;\n    msg3.payload = Potenciometro;\n    msg3.topic = \"Potenciometro;\"\n}\nreturn[msg1, msg2, msg3];","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":380,"wires":[["a6d3ab8c.d0c658","51e0b2a9.0a169c"],["9f022d82.d6106"],["1f270370.cb297d"]]},{"id":"a6d3ab8c.d0c658","type":"ui_text","z":"27c222c7.c4c10e","group":"e3715be7.8ca9b8","order":10,"width":0,"height":0,"name":"Pushbutton","label":"Pushbutton","format":"{{msg.payload}}","layout":"row-spread","x":420,"y":360,"wires":[]},{"id":"9f022d82.d6106","type":"ui_gauge","z":"27c222c7.c4c10e","name":"Temperatura","group":"e3715be7.8ca9b8","order":0,"width":0,"height":0,"gtype":"gage","title":"Temperatura","label":"celcios","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":430,"y":400,"wires":[]},{"id":"1f270370.cb297d","type":"ui_gauge","z":"27c222c7.c4c10e","name":"Potenciometro","group":"e3715be7.8ca9b8","order":1,"width":0,"height":0,"gtype":"compass","title":"Potenciometro","label":"Volts","format":"{{value}}","min":0,"max":"5","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":430,"y":460,"wires":[]},{"id":"51e0b2a9.0a169c","type":"debug","z":"27c222c7.c4c10e","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":440,"y":320,"wires":[]},{"id":"2aeedfb2.4f963","type":"debug","z":"27c222c7.c4c10e","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":400,"y":200,"wires":[]},{"id":"f0b5c01c.c6922","type":"OpcUa-Client","z":"4cc35445.18134c","endpoint":"b15ae0fd.c3766","action":"read","deadbandtype":"a","deadbandvalue":1,"time":10,"timeUnit":"s","certificate":"l","localfile":"","localkeyfile":"","securitymode":"None","securitypolicy":"None","name":"NodeRed","x":260,"y":260,"wires":[["a9b5a867.175c98"]]},{"id":"8982675f.188a6","type":"ui_chart","z":"4cc35445.18134c","name":"","group":"535b72c3.b2d50c","order":3,"width":0,"height":0,"label":"Dientes de Sierra","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"x":610,"y":180,"wires":[[]]},{"id":"20265943.732c5e","type":"ui_chart","z":"4cc35445.18134c","name":"","group":"535b72c3.b2d50c","order":4,"width":0,"height":0,"label":"Senoidal","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"x":580,"y":220,"wires":[[]]},{"id":"2f67b6cd.5e702a","type":"function","z":"4cc35445.18134c","name":"Interpreta datos","func":"msg1 = {};\nmsg2 = {};\nmsg3 = {};\nmsg4 = {};\nmsg5 = {};\nmsg6 = {};\nmsg7 = {};\nmsg8 = {};\n\nmsg1.topic=\"ns=3;i=1001;datatype=Double\";\nmsg2.topic=\"ns=3;i=1002;datatype=Double\";\nmsg3.topic=\"ns=3;i=1003;datatype=Double\";\nmsg4.topic=\"ns=3;i=1004;datatype=Double\";\nmsg5.topic=\"ns=3;i=1005;datatype=Double\";\nmsg6.topic=\"ns=3;i=1006;datatype=Double\";\nmsg7.topic=\"ns=3;i=1013;datatype=Double\";\nmsg8.topic=\"ns=3;i=1008;datatype=Boolean\";\n\nreturn [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8];","outputs":8,"noerr":0,"initialize":"","finalize":"","libs":[],"x":80,"y":280,"wires":[["f0b5c01c.c6922"],["f0b5c01c.c6922"],["f0b5c01c.c6922"],["f0b5c01c.c6922"],["f0b5c01c.c6922"],["f0b5c01c.c6922"],["f0b5c01c.c6922"],["f0b5c01c.c6922"]]},{"id":"8489b4e7.2419c8","type":"inject","z":"4cc35445.18134c","name":"","props":[],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":90,"y":120,"wires":[["2f67b6cd.5e702a"]]},{"id":"a9b5a867.175c98","type":"function","z":"4cc35445.18134c","name":"Separa","func":"msg1 = {};\nmsg2 = {};\nmsg3 = {};\nmsg4 = {};\nmsg5 = {};\nmsg6 = {};\nmsg7 = {};\nmsg8 = {};\n\n\nif(msg.topic==\"ns=3;i=1001\")\n{\n    msg1.payload=msg.payload;\n    msg1.topic=\"Contador;\"\n    //return [msg1, null, null, null, null, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1002\")\n{\n    msg2.payload=msg.payload;\n    msg2.topic=\"Random;\"\n    //return [null, msg2, null, null, null, null, null, null];\n\n}\n\nif(msg.topic==\"ns=3;i=1003\")\n{\n    msg3.payload=msg.payload;\n    msg3.topic=\"Dientes de Sierra;\"\n    //return [null, null, msg3, null, null, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1004\")\n{\n    msg4.payload=msg.payload;\n    msg4.topic=\"Senoidal;\"\n    //return [null, null, null, msg4, null, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1005\")\n{\n    msg5.payload=msg.payload;\n    msg5.topic=\"Cuadrada;\"\n    //return [null, null, null, null, msg5, null, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1006\")\n{\n    msg6.payload=msg.payload;\n    msg6.topic=\"Triangular;\"\n    //return [null, null, null, null, null, msg6, null, null];\n}\n\nif(msg.topic==\"ns=3;i=1013\")\n{\n    msg7.payload=msg.payload;\n    msg7.topic=\"Variable;\"\n    //return [null, null, null, null, null, null, msg7, null];\n}\n\nif(msg.topic==\"ns=3;i=1008\")\n{\n    msg8.payload=msg.payload;\n    msg8.topic=\"Pushbutton;\"\n    //return [null, null, null, null, null, null, null, msg8];\n}\n\nreturn [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8];","outputs":8,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":320,"wires":[["ebfd4885.6d6048"],["bdce3de2.f871c"],["8982675f.188a6"],["20265943.732c5e"],["7f87320e.893cbc"],["f7ef3ea8.41ab8"],["70f6ffd.e6aa6"],["6e520150.ccda9"]]},{"id":"ebfd4885.6d6048","type":"ui_chart","z":"4cc35445.18134c","name":"","group":"535b72c3.b2d50c","order":1,"width":0,"height":0,"label":"Contador","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"x":580,"y":100,"wires":[[]]},{"id":"bdce3de2.f871c","type":"ui_chart","z":"4cc35445.18134c","name":"","group":"535b72c3.b2d50c","order":2,"width":0,"height":0,"label":"Random","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"x":580,"y":140,"wires":[[]]},{"id":"7f87320e.893cbc","type":"ui_chart","z":"4cc35445.18134c","name":"","group":"535b72c3.b2d50c","order":5,"width":0,"height":0,"label":"Cuadrada","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"x":580,"y":260,"wires":[[]]},{"id":"f7ef3ea8.41ab8","type":"ui_chart","z":"4cc35445.18134c","name":"","group":"535b72c3.b2d50c","order":6,"width":0,"height":0,"label":"Triangular","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"x":580,"y":300,"wires":[[]]},{"id":"3a54e6ea.d1b3ea","type":"inject","z":"4cc35445.18134c","name":"Variable","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":true,"onceDelay":0.1,"topic":"ns=3;i=1013;datatype=Double","payload":"23","payloadType":"num","x":60,"y":420,"wires":[[]]},{"id":"acf12f1d.eec9f","type":"OpcUa-Client","z":"4cc35445.18134c","endpoint":"b15ae0fd.c3766","action":"write","deadbandtype":"a","deadbandvalue":1,"time":10,"timeUnit":"s","certificate":"n","localfile":"","localkeyfile":"","securitymode":"None","securitypolicy":"None","name":"","x":420,"y":420,"wires":[[]]},{"id":"70f6ffd.e6aa6","type":"ui_text","z":"4cc35445.18134c","group":"535b72c3.b2d50c","order":8,"width":0,"height":0,"name":"Escritura del cliente","label":"Variable","format":"{{msg.payload}}","layout":"row-spread","x":610,"y":340,"wires":[]},{"id":"6e520150.ccda9","type":"ui_text","z":"4cc35445.18134c","group":"535b72c3.b2d50c","order":10,"width":0,"height":0,"name":"Interruptor","label":"Estado","format":"{{msg.payload}}","layout":"row-spread","x":590,"y":380,"wires":[]},{"id":"9a54b1ab.c47e5","type":"inject","z":"4cc35445.18134c","name":"Pushbutton","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":true,"onceDelay":0.1,"topic":"ns=3;i=1008;datatype=Boolean","payload":"true","payloadType":"bool","x":70,"y":480,"wires":[[]]},{"id":"b5e91d4b.92056","type":"ui_switch","z":"4cc35445.18134c","name":"Interruptor","label":"Switch","tooltip":"","group":"535b72c3.b2d50c","order":9,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"ns=3;i=1008;datatype=Boolean","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"x":70,"y":540,"wires":[["acf12f1d.eec9f"]]},{"id":"44fcf58f.e4731c","type":"ui_numeric","z":"4cc35445.18134c","name":"Variables","label":"Escritura del cliente","tooltip":"","group":"535b72c3.b2d50c","order":7,"width":0,"height":0,"wrap":false,"passthru":true,"topic":"ns=3;i=1013;datatype=Double","topicType":"str","format":"{{value}}","min":0,"max":"500","step":1,"x":90,"y":380,"wires":[["acf12f1d.eec9f"]]},{"id":"afcab003512a5c13","type":"OpcUa-Client","z":"71d3bc79.167b54","endpoint":"1be80844.215908","action":"read","deadbandtype":"a","deadbandvalue":1,"time":10,"timeUnit":"s","certificate":"n","localfile":"","localkeyfile":"","securitymode":"None","securitypolicy":"None","name":"","x":180,"y":180,"wires":[["0c528ff3f71a3d59"]]},{"id":"37225d294f17b1e1","type":"inject","z":"71d3bc79.167b54","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"ns=1;s=MyVariable2;datatype=Double","payload":"","payloadType":"date","x":80,"y":240,"wires":[["afcab003512a5c13"]]},{"id":"0c528ff3f71a3d59","type":"debug","z":"71d3bc79.167b54","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":290,"y":240,"wires":[]},{"id":"ccaa41d69690537d","type":"opcua-compact-server","z":"71d3bc79.167b54","port":54840,"endpoint":"","productUri":"","acceptExternalCommands":true,"maxAllowedSessionNumber":10,"maxConnectionsPerEndpoint":10,"maxAllowedSubscriptionNumber":100,"alternateHostname":"","name":"","showStatusActivities":false,"showErrors":false,"allowAnonymous":true,"individualCerts":false,"isAuditing":false,"serverDiscovery":true,"users":[],"xmlsetsOPCUA":[],"publicCertificateFile":"","privateCertificateFile":"","registerServerMethod":1,"discoveryServerEndpointUrl":"","capabilitiesForMDNS":"","maxNodesPerRead":1000,"maxNodesPerWrite":1000,"maxNodesPerHistoryReadData":100,"maxNodesPerBrowse":3000,"maxBrowseContinuationPoints":10,"maxHistoryContinuationPoints":10,"delayToInit":1000,"delayToClose":200,"serverShutdownTimeout":100,"addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = address space of the node-opcua server\n  // eventObjects = add event variables here to hold them in memory from this script\n\n  // internal sandbox objects are:\n  // node = the compact server node,\n  // coreServer = core compact server object for debug and access to NodeOPCUA\n  // this.sandboxNodeContext = node context node-red\n  // this.sandboxFlowContext = flow context node-red\n  // this.sandboxGlobalContext = global context node-red\n  // this.sandboxEnv = env variables\n  // timeout and interval functions as expected from nodejs\n\n  const opcua = coreServer.choreCompact.opcua;\n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n  const namespace = addressSpace.getOwnNamespace();\n\n      let myVariable1 = addressSpace.addObject({\n        browseName: 'Variables Node-Red',\n        description: 'The Object representing some variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n\nif(coreServer.core) {\n        addressSpace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=4;s=TestReadWrite',\n            browseName: 'TestReadWrite',\n            displayName: 'Test Read and Write',\n            dataType: 'Double',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                        value: scriptObjects.testReadWrite\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.testReadWrite = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n        let memoryVariable = addressSpace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=4;s=free_memory',\n            browseName: 'FreeMemory',\n            displayName: 'Free Memory',\n            dataType: coreServer.core.nodeOPCUA.DataType.Double,\n            \n            value: {\n              get: function () {\n                return new coreServer.core.nodeOPCUA.Variant({\n                  dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                  value: coreServer.core.availableMemory()\n                })\n              }\n            }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n        \n        let globalValue = node.context().global.get(\"TestOPCUAVarValue\")\n        if(globalValue) {\n            coreServer.internalDebugLog('init TestOPCUAVarValue in address space')\n            let testOPCUAVarValue = addressSpace.addVariable({\n                componentOf: myVariables,\n                nodeId: 'ns=4;s=TestOPCUAVarValue',\n                browseName: 'TestOPCUAVarValue',\n                displayName: 'Test OPC UA Variable Value',\n                dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                \n                value: {\n                  get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                      dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                      value: node.context().global.get(\"TestOPCUAVarValue\").value\n                    })\n                  },\n                  set: function (variant) {\n                      scriptObjects.testReadWrite = parseFloat(variant.value)\n                      return coreServer.core.nodeOPCUA.StatusCodes.Good\n                  }\n                }\n            })\n            addressSpace.installHistoricalDataNode(memoryVariable)\n        }\n    \n    } else {\n        coreServer.internalDebugLog('coreServer.core needed for coreServer.core.nodeOPCUA')\n    }\n    \n  done();\n}\n","x":160,"y":80,"wires":[]},{"id":"bffc7ac0f7855fc7","type":"OPCUA-IIoT-Flex-Server","z":"71d3bc79.167b54","port":"55380","endpoint":"","acceptExternalCommands":true,"maxAllowedSessionNumber":"","maxConnectionsPerEndpoint":"","maxAllowedSubscriptionNumber":"","alternateHostname":"","name":"","showStatusActivities":false,"showErrors":false,"allowAnonymous":true,"isAuditing":false,"users":[],"addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects) {\n    // server = the created node-opcua server\n    // addressSpace = script placeholder\n    // eventObjects = to hold event variables in memory from this script\n    \n    // internal global sandbox objects are \n    // node = node of the flex server, \n    // coreServer = core iiot server object for debug and access to nodeOPCUA,\n    // and scriptObjects to hold variables and functions\n    \n    // globals are to find on node.context().global and should be initialized here\n    node.context().global.set(\"TestOPCUAVarValue\", {})\n    \n    coreServer.internalDebugLog('init dynamic address space')\n    node.warn('construct new address space for OPC UA')\n    \n    // from here - see the node-opcua docs how to build address sapces\n    let tanks = addressSpace.addObject({\n        browseName: 'Tanks',\n        description: 'The Object representing some tanks',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    let oilTankLevel = addressSpace.addVariable({\n        browseName: 'OilTankLevel',\n        displayName: 'Oil Tank Level',\n        description: 'Fill level in percentage (0% to 100%) of the oil tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    // ---------------------------------------------------------------------------------\n    // Let's create a exclusive Limit Alarm that automatically raise itself\n    // when the tank level is out of limit\n    // ---------------------------------------------------------------------------------\n    let exclusiveLimitAlarmType = addressSpace.findEventType('ExclusiveLimitAlarmType')\n    node.assert(exclusiveLimitAlarmType !== null)\n    \n    let oilTankLevelCondition = addressSpace.instantiateExclusiveLimitAlarm(exclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: oilTankLevel,\n        browseName: 'OilTankLevelCondition',\n        displayName: 'Oil Tank Level Condition',\n        description: 'ExclusiveLimitAlarmType Condition',\n        conditionName: 'OilLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: oilTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // --------------------------------------------------------------\n    // Let's create a second letiable with no Exclusive alarm\n    // --------------------------------------------------------------\n    let gasTankLevel = addressSpace.addVariable({\n        browseName: 'GasTankLevel',\n        displayName: 'Gas Tank Level',\n        description: 'Fill level in percentage (0% to 100%) of the gas tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    let nonExclusiveLimitAlarmType = addressSpace.findEventType('NonExclusiveLimitAlarmType')\n    node.assert(nonExclusiveLimitAlarmType !== null)\n    \n    let gasTankLevelCondition = addressSpace.instantiateNonExclusiveLimitAlarm(nonExclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: gasTankLevel,\n        browseName: 'GasTankLevelCondition',\n        displayName: 'Gas Tank Level Condition',\n        description: 'NonExclusiveLimitAlarmType Condition',\n        conditionName: 'GasLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: gasTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // variable with value\n    if(scriptObjects.testReadWrite === undefined || scriptObjects.testReadWrite === null) {\n            scriptObjects.testReadWrite = 1000.0\n    }\n    \n    let myVariables = addressSpace.addObject({\n        browseName: 'MyVariables',\n        description: 'The Object representing some variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    if(coreServer.core) {\n        addressSpace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=4;s=TestReadWrite',\n            browseName: 'TestReadWrite',\n            displayName: 'Test Read and Write',\n            dataType: 'Double',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                        value: scriptObjects.testReadWrite\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.testReadWrite = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n        let memoryVariable = addressSpace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=4;s=free_memory',\n            browseName: 'FreeMemory',\n            displayName: 'Free Memory',\n            dataType: coreServer.core.nodeOPCUA.DataType.Double,\n            \n            value: {\n              get: function () {\n                return new coreServer.core.nodeOPCUA.Variant({\n                  dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                  value: coreServer.core.availableMemory()\n                })\n              }\n            }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n        \n        let globalValue = node.context().global.get(\"TestOPCUAVarValue\")\n        if(globalValue) {\n            coreServer.internalDebugLog('init TestOPCUAVarValue in address space')\n            let testOPCUAVarValue = addressSpace.addVariable({\n                componentOf: myVariables,\n                nodeId: 'ns=4;s=TestOPCUAVarValue',\n                browseName: 'TestOPCUAVarValue',\n                displayName: 'Test OPC UA Variable Value',\n                dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                \n                value: {\n                  get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                      dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                      value: node.context().global.get(\"TestOPCUAVarValue\").value\n                    })\n                  },\n                  set: function (variant) {\n                      scriptObjects.testReadWrite = parseFloat(variant.value)\n                      return coreServer.core.nodeOPCUA.StatusCodes.Good\n                  }\n                }\n            })\n            addressSpace.installHistoricalDataNode(memoryVariable)\n        }\n    \n    } else {\n        coreServer.internalDebugLog('coreServer.core needed for coreServer.core.nodeOPCUA')\n    }\n\n    // hold event objects in memory \n    eventObjects.oilTankLevel = oilTankLevel\n    eventObjects.oilTankLevelCondition = oilTankLevelCondition\n    \n    eventObjects.gasTankLevel = gasTankLevel\n    eventObjects.gasTankLevelCondition = gasTankLevelCondition\n}","x":540,"y":260,"wires":[[]]}]